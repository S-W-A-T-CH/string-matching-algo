'''
Knuth-Morris-Pratt (KMP) Algorithm:
KMP is more efficient than the naive approach by taking advantage of the information from previous character comparisons.
'''  

def compute_lps_array(pattern):
    m = len(pattern)
    lps = [0] * m
    length = 0
    i = 1

    while i < m:
        if pattern[i] == pattern[length]:
            length += 1
            lps[i] = length
            i += 1
        else:
            if length != 0:
                length = lps[length - 1]
            else:
                lps[i] = 0
                i += 1

def kmp_string_match(text, pattern):
    n = len(text)
    m = len(pattern)
    lps = [0] * m
    compute_lps_array(pattern)
    matches = []

    i, j = 0, 0
    while i < n:
        if pattern[j] == text[i]:
            i += 1
            j += 1

        if j == m:
            matches.append(i - j)
            j = lps[j - 1]
        elif i < n and pattern[j] != text[i]:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1

    return matches

text = "ABABDABACDABABCABAB"
pattern = "ABABC"
matches = kmp_string_match(text, pattern)
print("Pattern found at positions:", matches)
